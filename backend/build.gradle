plugins {
    id 'org.springframework.boot' version '2.5.2'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id "org.asciidoctor.convert" version "1.5.9.2"
    id 'jacoco'
}

group = 'com.wooteco'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    // jwt
    implementation 'io.jsonwebtoken:jjwt:0.9.1'

    implementation 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.7.1'

    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.h2database:h2:1.4.199'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    // Maria DB
    implementation 'org.mariadb.jdbc:mariadb-java-client:2.1.2'

    // AWS S3
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-aws-core', version: '2.2.6.RELEASE'

    // Rest Docs
    testImplementation('org.springframework.restdocs:spring-restdocs-mockmvc')
    asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor'

    // flyway
    implementation('org.flywaydb:flyway-core:6.4.2')

    // ffmpeg
    implementation 'net.bramp.ffmpeg:ffmpeg:0.6.2'

    // Testcontainers
    implementation("com.amazonaws:aws-java-sdk-s3")
    testImplementation "org.testcontainers:testcontainers:1.15.3"
    testImplementation "org.testcontainers:junit-jupiter:1.15.3"
    testImplementation "org.testcontainers:localstack:1.15.3"
    compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.4'
    compile group: 'commons-io', name: 'commons-io', version: '2.4'

    // restassured
    testImplementation 'io.rest-assured:rest-assured:3.3.0'

    // slack
    implementation 'com.github.maricn:logback-slack-appender:1.4.0'
}

ext {
    snippetsDir = file('build/generated-snippets')
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

task createDocument(type: Copy) {
    dependsOn asciidoctor
    from file("build/asciidoc/html5/index.html")
    into file("src/main/resources/static/docs")
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    finalizedBy 'jacocoTestReport'
}

bootJar {
    dependsOn asciidoctor
    from("${asciidoctor.outputDir}/html5") {
        into 'static/docs'
    }
}

jacoco {
    // JaCoCo 버전
    toolVersion = '0.8.5'
}

jacocoTestReport {
    reports {
        html.enabled true
        csv.enabled true
        xml.enabled true
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    def Qdomains = []

    for (qPattern in '*.QA'..'*.QZ') { // qPattern = '*.QA', '*.QB', ... '*.QZ'
        Qdomains.add(qPattern + '*')
    }

    violationRules {
        rule {
            enabled = false
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.7
            }

            excludes = [
                            'com.wooteco.nolto.auth.infrastructure.*',
                            'com.wooteco.nolto.image.*'
                        ] + Qdomains // 제외할 Qdomains 패턴 추가
        }
    }
}